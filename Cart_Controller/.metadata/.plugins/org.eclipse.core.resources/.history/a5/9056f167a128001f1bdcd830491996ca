
#include "sht4x.h"


/* all measurement commands return T (CRC) RH (CRC) */
#define SHT4X_CMD_MEASURE_HPM 0xFD
#define SHT4X_CMD_MEASURE_LPM 0xE0
#define SHT4X_CMD_READ_SERIAL 0x89
#define SHT4X_CMD_DURATION_USEC 1000
#define STATUS_OK 0
#define STATUS_ERR_BAD_DATA (-1)
#define STATUS_CRC_FAIL (-2)
#define STATUS_UNKNOWN_DEVICE (-3)
#define SHT4X_MEASUREMENT_DURATION_USEC 10000 /* 10ms "high repeatability" */
#define SHT4X_MEASUREMENT_DURATION_LPM_USEC 2500 /* 2.5ms "low repeatability" */
#define SENSIRION_COMMAND_SIZE 2
#define SENSIRION_WORD_SIZE 2
#define SENSIRION_NUM_WORDS(x) (sizeof(x) / SENSIRION_WORD_SIZE)
#define SENSIRION_MAX_BUFFER_WORDS 32
#define SHT4X_ADDRESS (0x44 << 0x01)

static uint8_t sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
static uint16_t sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;

int16_t sht4x_measure_blocking_read(float* temperature, float* humidity) {
    int16_t ret;
    uint16_t rawTemp, rawHumd;
    uint16_t words[2];
    i2c1_WriteBuffer(SHT4X_ADDRESS, &sht4x_cmd_measure, 1);
    if (ret)
            return ret;
    HAL_Delay(sht4x_cmd_measure_delay_us);
    ret = i2c1_ReadBuffer(SHT4X_ADDRESS,words,SENSIRION_NUM_WORDS(words));
	rawTemp = ((uint16_t) words[0] << 8) | words[1];
	rawHumd = ((uint16_t) words[2] << 8) | words[3];
	*temperature = (-45.0f + 175.0f * (rawTemp / 65535.0f));
	*humidity = (-6.0f + 125.0f * (rawHumd / 65535.0f));

	return ret;

}

int16_t sht4x_probe(void) {
    uint32_t serial;
    return sht4x_read_serial(&serial);
}

void sht4x_enable_low_power_mode(uint8_t enable_low_power_mode) {
    if (enable_low_power_mode) {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_LPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_LPM_USEC;
    } else {
        sht4x_cmd_measure = SHT4X_CMD_MEASURE_HPM;
        sht4x_cmd_measure_delay_us = SHT4X_MEASUREMENT_DURATION_USEC;
    }
}

int16_t sht4x_read_serial(uint32_t* serial) {
    const uint8_t cmd = SHT4X_CMD_READ_SERIAL;
    int16_t ret;
    uint16_t serial_words[SENSIRION_NUM_WORDS(*serial)];

    ret = i2c1_WriteBuffer(SHT4X_ADDRESS, &cmd, 1);
    if (ret)
        return ret;
    HAL_Delay(sht4x_cmd_measure_delay_us);
    ret = i2c1_ReadBuffer(SHT4X_ADDRESS, serial_words,2);
    *serial = ((uint32_t)serial_words[0] << 16) | serial_words[1];
    return ret;
}


uint8_t sht4x_get_configured_address(void) {
    return SHT4X_ADDRESS;
}
